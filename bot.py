import asyncio
import random
import time
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

# --- SQLAlchemy –∏ PostgreSQL ---
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy import Column, BigInteger, String, Integer, Boolean, select, update, delete

# –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL

engine = create_async_engine(DATABASE_URL, echo=False)
AsyncSessionLocal = sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)
Base = declarative_base()

class Player(Base):
    __tablename__ = "players"
    user_id = Column(BigInteger, primary_key=True)
    name = Column(String)
    position = Column(String)
    club = Column(String)
    matches = Column(Integer, default=0)
    wins = Column(Integer, default=0)
    draws = Column(Integer, default=0)
    losses = Column(Integer, default=0)
    goals = Column(Integer, default=0)
    assists = Column(Integer, default=0)
    saves = Column(Integer, default=0)
    tackles = Column(Integer, default=0)
    is_in_squad = Column(Boolean, default=True)
    current_round = Column(Integer, default=1)
    last_match_date = Column(String)

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î ---
async def get_player(user_id):
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Player).where(Player.user_id == user_id))
        return result.scalar_one_or_none()

async def create_player(user_id, name, position, club, start_date):
    async with AsyncSessionLocal() as session:
        player = Player(
            user_id=user_id, name=name, position=position, club=club,
            last_match_date=start_date
        )
        session.add(player)
        await session.commit()

async def update_player_stats(user_id, **kwargs):
    async with AsyncSessionLocal() as session:
        await session.execute(
            update(Player).where(Player.user_id == user_id).values(**kwargs)
        )
        await session.commit()

async def update_player_club(user_id, club):
    await update_player_stats(user_id, club=club)

async def update_player_squad_status(user_id, is_in_squad):
    await update_player_stats(user_id, is_in_squad=is_in_squad)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑—Ü–∏—è –±–∞–∑—ã ---
async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

# --- –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞ (–ø—Ä–∏–º–µ—Ä –¥–ª—è /start) ---
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
CHANNEL_ID = "@football_simulator"

class GameStates(StatesGroup):
    waiting_name = State()
    waiting_position = State()
    waiting_club_choice = State()
    playing = State()

# –°–ø–∏—Å–æ–∫ –∫–ª—É–±–æ–≤ –§–ù–õ –°–µ—Ä–µ–±—Ä–æ
FNL_SILVER_CLUBS = {
    "–¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫": {"position": 1, "strength": 80},
    "–°–∏–±–∏—Ä—å": {"position": 2, "strength": 75},
    "–ê–≤–∞–Ω–≥–∞—Ä–¥-–ö—É—Ä—Å–∫": {"position": 3, "strength": 70},
    "–î–∏–Ω–∞–º–æ-–ö–∏—Ä–æ–≤": {"position": 4, "strength": 65},
    "–î–∏–Ω–∞–º–æ-–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫": {"position": 5, "strength": 60},
    "–î–∏–Ω–∞–º–æ-2 –ú–æ—Å–∫–≤–∞": {"position": 6, "strength": 55},
    "–ò—Ä—Ç—ã—à –û–º—Å–∫": {"position": 7, "strength": 50},
    "–ö–∞–ª—É–≥–∞": {"position": 8, "strength": 45},
    "–§–æ—Ä—Ç–µ": {"position": 9, "strength": 40},
    "–ú—É—Ä–æ–º": {"position": 10, "strength": 35}
}

# 1. –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—É–±–æ–≤ –§–ù–õ –ó–æ–ª–æ—Ç–æ
FNL_GOLD_CLUBS = {
    "–°–ø–∞—Ä—Ç–∞–∫ –ö—Å": {"position": 1, "strength": 90},
    "–í–æ–ª–≥–∞ –£–ª": {"position": 2, "strength": 88},
    "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥–µ—Ü": {"position": 3, "strength": 86},
    "–í–æ–ª–≥–∞—Ä—å": {"position": 4, "strength": 84},
    "–ß–µ–ª—è–±–∏–Ω—Å–∫": {"position": 5, "strength": 82},
    "–†–æ–¥–∏–Ω–∞-2": {"position": 6, "strength": 80},
    "–ú–∞—à—É–∫-–ö–ú–í": {"position": 7, "strength": 78},
    "–í–µ–ª–µ—Å": {"position": 8, "strength": 76},
    "–ö—É–±–∞–Ω—å": {"position": 9, "strength": 74},
    "–¢–æ—Ä–ø–µ–¥–æ –ú–∏–∞—Å—Å": {"position": 10, "strength": 72}
}

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
SEASON_START_MONTH = 9  # –°–µ–Ω—Ç—è–±—Ä—å
SEASON_END_MONTH = 5    # –ú–∞–π
WINTER_BREAK_START = 12  # –î–µ–∫–∞–±—Ä—å
WINTER_BREAK_END = 2    # –§–µ–≤—Ä–∞–ª—å
DAYS_BETWEEN_MATCHES = 7  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏
SEASON_START_DATE = "01.09.2024"  # –ù–∞—á–∞–ª–æ —Å–µ–∑–æ–Ω–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç –∫–ª—É–±–æ–≤
def get_random_club_offers():
    clubs = list(FNL_SILVER_CLUBS.keys())
    return random.sample(clubs, 3)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∫–ª—É–±–æ–≤
def get_club_offers_keyboard(offers):
    keyboard = []
    for club in offers:
        keyboard.append([InlineKeyboardButton(
            text=f"üèÜ {club}",
            callback_data=f"choose_club_{club}"
        )])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
def get_position_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü•Ö –í—Ä–∞—Ç–∞—Ä—å", callback_data="position_gk")],
        [InlineKeyboardButton(text="üõ°Ô∏è –ó–∞—â–∏—Ç–Ω–∏–∫", callback_data="position_def")],
        [InlineKeyboardButton(text="‚öΩ –ù–∞–ø–∞–¥–∞—é—â–∏–π", callback_data="position_fw")]
    ])

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å –º–∞—Ç—á", callback_data="play_match")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")]
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤–æ –≤—Ä–µ–º—è –º–∞—Ç—á–∞
def get_match_actions_keyboard(position, is_second_phase=False):
    message_id = int(time.time())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if position == "–í—Ä–∞—Ç–∞—Ä—å":
        if not is_second_phase:
            return InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üèÉ –í—ã–π—Ç–∏ –Ω–∞ –∏–≥—Ä–æ–∫–∞", callback_data=f"action_rush_{message_id}")],
                [InlineKeyboardButton(text="‚ÜôÔ∏è –ü—Ä—ã–≥–Ω—É—Ç—å –≤–ª–µ–≤–æ", callback_data=f"action_left_{message_id}")],
                [InlineKeyboardButton(text="‚ÜòÔ∏è –ü—Ä—ã–≥–Ω—É—Ç—å –≤–ø—Ä–∞–≤–æ", callback_data=f"action_right_{message_id}")]
            ])
        else:
            return InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öΩ –í—ã–±–∏—Ç—å –º—è—á", callback_data=f"action_kick_{message_id}")],
                [InlineKeyboardButton(text="üéØ –í—ã–±—Ä–æ—Å–∏—Ç—å –º—è—á", callback_data=f"action_throw_{message_id}")]
            ])
    elif position == "–ó–∞—â–∏—Ç–Ω–∏–∫":
        if not is_second_phase:
            return get_defender_defense_keyboard()
        else:
            return get_defender_after_defense_keyboard()
    else:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚öΩ –£–¥–∞—Ä –ø–æ –≤–æ—Ä–æ—Ç–∞–º", callback_data=f"action_shot_{message_id}")],
            [InlineKeyboardButton(text="üéØ –û—Ç–¥–∞—Ç—å –ø–∞—Å", callback_data=f"action_pass_{message_id}")],
            [InlineKeyboardButton(text="üèÉ –î—Ä–∏–±–ª–∏–Ω–≥", callback_data=f"action_dribble_{message_id}")]
        ])

def get_continue_keyboard():
    timestamp = int(time.time())  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"continue_match_{timestamp}")]
    ])

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(user_id: int) -> bool:
    try:
        user_channel_status = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        status = user_channel_status.status
        return status in ['member', 'administrator', 'creator']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
def get_subscription_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID[1:]}")],
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
    ])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
async def send_photo_with_text(message, folder, filename, text):
    photo_path = os.path.join('images', folder, filename)
    if os.path.exists(photo_path):
        with open(photo_path, 'rb') as file:
            photo = BufferedInputFile(file.read(), filename=filename)
            await message.answer_photo(photo, caption=text)
    else:
        await message.answer(text)

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å –º–∞—Ç—á
    data = await state.get_data()
    if data.get('match_state'):
        await message.answer(
            "‚ùå –°–µ–π—á–∞—Å –∏–¥–µ—Ç –º–∞—Ç—á! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
        )
        return

    if not await check_subscription(message.from_user.id):
        await message.answer(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    player = await get_player(message.from_user.id)
    if player:
        await state.set_state(GameStates.playing)
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {player.name}!\n\n"
            f"–í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ {player.club}\n"
            f"–ü–æ–∑–∏—Ü–∏—è: {player.position}\n"
            f"{'‚úÖ –í —Å—Ç–∞—Ä—Ç–æ–≤–æ–º —Å–æ—Å—Ç–∞–≤–µ' if player.is_in_squad else '‚ùå –ù–µ –≤ –∑–∞—è–≤–∫–µ'}\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä!\n"
            "üèÜ –ü–æ–±–µ–∂–¥–∞–π –≤ –º–∞—Ç—á–∞—Ö\n"
            "‚≠ê –°—Ç–∞–Ω—å –ª–µ–≥–µ–Ω–¥–æ–π —Ñ—É—Ç–±–æ–ª–∞!"
        )
        with open("mbappe.png", "rb") as file:
            photo = BufferedInputFile(file.read(), filename="mbappe.png")
            await message.answer_photo(
                photo,
                caption=welcome_text,
                reply_markup=get_main_keyboard()
            )
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ñ—É—Ç–±–æ–ª—å–Ω—É—é –∫–∞—Ä—å–µ—Ä—É! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.set_state(GameStates.waiting_name)

@dp.callback_query(lambda c: c.data == "check_subscription")
async def check_subscription_callback(callback: types.CallbackQuery):
    if await check_subscription(callback.from_user.id):
        player = await get_player(callback.from_user.id)
        if player:
            welcome_text = (
                f"üëã –ü—Ä–∏–≤–µ—Ç, {player.name}!\n\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä!\n"
                "üèÜ –ü–æ–±–µ–∂–¥–∞–π –≤ –º–∞—Ç—á–∞—Ö\n"
                "‚≠ê –°—Ç–∞–Ω—å –ª–µ–≥–µ–Ω–¥–æ–π —Ñ—É—Ç–±–æ–ª–∞!"
            )
            with open("mbappe.png", "rb") as file:
                photo = BufferedInputFile(file.read(), filename="mbappe.png")
                await callback.message.answer_photo(
                    photo,
                    caption=welcome_text,
                    reply_markup=get_main_keyboard()
                )
        else:
            await callback.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
            await callback.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ñ—É—Ç–±–æ–ª—å–Ω—É—é –∫–∞—Ä—å–µ—Ä—É! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await callback.answer()
    else:
        await callback.answer("–í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

@dp.message(GameStates.waiting_name)
async def process_name(message: types.Message, state: FSMContext):
    if not await check_subscription(message.from_user.id):
        await message.answer(
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!",
            reply_markup=get_subscription_keyboard()
        )
        return
    await state.update_data(name=message.text)
    await state.set_state(GameStates.waiting_position)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –ø–æ–ª–µ:",
        reply_markup=get_position_keyboard()
    )

@dp.callback_query(lambda c: c.data.startswith('position_'), GameStates.waiting_position)
async def process_position(callback: types.CallbackQuery, state: FSMContext):
    position_map = {
        "position_gk": "–í—Ä–∞—Ç–∞—Ä—å",
        "position_def": "–ó–∞—â–∏—Ç–Ω–∏–∫",
        "position_fw": "–ù–∞–ø–∞–¥–∞—é—â–∏–π"
    }
    
    position = position_map[callback.data]
    user_data = await state.get_data()
    name = user_data['name']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(position=position)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –∫–ª—É–±–æ–≤
    offers = get_random_club_offers()
    await state.update_data(offers=offers)
    
    await state.set_state(GameStates.waiting_club_choice)
    await callback.message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, {name}! –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∑–∏—Ü–∏—é: {position}\n\n"
        "–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞—à –ø–µ—Ä–≤—ã–π –∞–≥–µ–Ω—Ç. –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–≥–æ:\n–ü–æ—Å—Ç—É–ø–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö –∫–ª—É–±–æ–≤ –§–ù–õ –°–µ—Ä–µ–±—Ä–æ:\n\n"
        f"1. {offers[0]}\n"
        f"2. {offers[1]}\n"
        f"3. {offers[2]}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∫–∞—Ä—å–µ—Ä—É:",
        reply_markup=get_club_offers_keyboard(offers)
    )
    await callback.answer()

def get_initial_player_date():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞"""
    current_date = datetime.now()
    current_month = current_date.month
    
    # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —Å–µ–∑–æ–Ω –∞–∫—Ç–∏–≤–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    if is_season_active(current_date):
        return current_date.strftime("%Y-%m-%d")
    
    # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ —Å–µ–∑–æ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞ –Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
    if current_month < SEASON_START_MONTH:
        # –ï—Å–ª–∏ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–µ–∑–æ–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
        return datetime(current_date.year, SEASON_START_MONTH, 1).strftime("%Y-%m-%d")
    else:
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–¥–∞
        return datetime(current_date.year + 1, SEASON_START_MONTH, 1).strftime("%Y-%m-%d")

@dp.callback_query(lambda c: c.data.startswith('choose_club_'), GameStates.waiting_club_choice)
async def process_club_choice(callback: types.CallbackQuery, state: FSMContext):
    club = callback.data.split('_')[2]
    user_data = await state.get_data()
    name = user_data['name']
    position = user_data['position']  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∏–≥—Ä–æ–∫–∞
    start_date = get_initial_player_date()
    await create_player(callback.from_user.id, name, position, club, start_date)
    await state.set_state(GameStates.playing)
    
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–ª—É–±: {club}\n"
        f"–ü–æ–∑–∏—Ü–∏—è: {position}\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä!\n"
        "üèÜ –ü–æ–±–µ–∂–¥–∞–π –≤ –º–∞—Ç—á–∞—Ö\n"
        "‚≠ê –°—Ç–∞–Ω—å –ª–µ–≥–µ–Ω–¥–æ–π —Ñ—É—Ç–±–æ–ª–∞!"
    )
    with open("mbappe.png", "rb") as file:
        photo = BufferedInputFile(file.read(), filename="mbappe.png")
        await callback.message.answer_photo(
            photo,
            caption=welcome_text,
            reply_markup=get_main_keyboard()
        )
    await callback.answer()

async def get_virtual_date(player):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∏–≥—Ä–æ–∫–∞"""
    last_match_date = player.last_match_date  # last_match_date
    if not last_match_date:
        return datetime.strptime(SEASON_START_DATE, "%d.%m.%Y")  # –ù–∞—á–∞–ª–æ —Å–µ–∑–æ–Ω–∞
    return datetime.strptime(last_match_date, "%d.%m.%Y")

def is_season_active(virtual_date):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–¥–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å —Å–µ–∑–æ–Ω –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    current_month = virtual_date.month
    return (SEASON_START_MONTH <= current_month <= 12) or (1 <= current_month <= SEASON_END_MONTH)

def is_winter_break(virtual_date):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–¥–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å –∑–∏–º–Ω–∏–π –ø–µ—Ä–µ—Ä—ã–≤ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    current_month = virtual_date.month
    # –ó–∏–º–Ω–∏–π –ø–µ—Ä–µ—Ä—ã–≤ —Å –¥–µ–∫–∞–±—Ä—è –ø–æ —è–Ω–≤–∞—Ä—å
    return current_month == 12 or current_month == 1

async def can_play_match(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ —Å—ã–≥—Ä–∞—Ç—å –º–∞—Ç—á –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    player = await get_player(user_id)
    if not player:
        return False, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"
    
    virtual_date = await get_virtual_date(player)
    
    if not is_season_active(virtual_date):
        return False, "‚ùå –°–µ–∑–æ–Ω –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è –∏–ª–∏ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –°–ª–µ–¥—É—é—â–∏–π —Å–µ–∑–æ–Ω –Ω–∞—á–Ω–µ—Ç—Å—è –≤ —Å–µ–Ω—Ç—è–±—Ä–µ."
    
    # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –∑–∏–º–Ω–∏–π –ø–µ—Ä–µ—Ä—ã–≤, –ø—Ä–æ–¥–≤–∏–≥–∞–µ–º –¥–∞—Ç—É –¥–æ —Ñ–µ–≤—Ä–∞–ª—è
    if is_winter_break(virtual_date):
        # –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –¥–∞—Ç—É –¥–æ —Ñ–µ–≤—Ä–∞–ª—è
        new_date = virtual_date.replace(month=2, day=1)
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤ –±–∞–∑–µ
        await update_player_stats(
            user_id=user_id,
            last_match_date=new_date.strftime("%d.%m.%Y")
        )
        return False, "‚ùå –°–µ–π—á–∞—Å –∑–∏–º–Ω–∏–π –ø–µ—Ä–µ—Ä—ã–≤. –ú–∞—Ç—á–∏ –≤–æ–∑–æ–±–Ω–æ–≤—è—Ç—Å—è –≤ —Ñ–µ–≤—Ä–∞–ª–µ."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—Ç—á –≤ —Ç–µ–∫—É—â–µ–º —Ç—É—Ä–µ
    current_round = player.current_round if player.matches > 0 else 1
    opponent = get_opponent_by_round(player.club, current_round)
    
    # –ï—Å–ª–∏ –º–∞—Ç—á–∞ –Ω–µ—Ç, –ø—Ä–æ–¥–≤–∏–≥–∞–µ–º –¥–∞—Ç—É –∏ —Ç—É—Ä
    while not opponent and current_round <= len(MATCH_CALENDAR):
        current_round += 1
        opponent = get_opponent_by_round(player.club, current_round)
        # –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –¥–∞—Ç—É –Ω–∞ –Ω–µ–¥–µ–ª—é
        new_date = virtual_date + timedelta(days=DAYS_BETWEEN_MATCHES)
        if new_date.month == SEASON_START_MONTH and virtual_date.month != SEASON_START_MONTH:
            new_date = new_date.replace(year=new_date.year + 1)
        virtual_date = new_date
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤ –±–∞–∑–µ
        await update_player_stats(
            user_id=user_id,
            current_round=current_round,
            last_match_date=virtual_date.strftime("%d.%m.%Y")
        )
    
    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
    if current_round > len(MATCH_CALENDAR):
        current_round = 1
        opponent = get_opponent_by_round(player.club, current_round)
    
    return True, ""

async def advance_virtual_date(player):
    """–ü—Ä–æ–¥–≤–∏–≥–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∏–≥—Ä–æ–∫–∞ –≤–ø–µ—Ä–µ–¥ –Ω–∞ 7 –¥–Ω–µ–π"""
    current_date = await get_virtual_date(player)
    new_date = current_date + timedelta(days=DAYS_BETWEEN_MATCHES)
    
    # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –º–µ—Å—è—Ü - —Å–µ–Ω—Ç—è–±—Ä—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥–æ–¥
    if new_date.month == SEASON_START_MONTH and current_date.month != SEASON_START_MONTH:
        new_date = new_date.replace(year=new_date.year + 1)
    
    return new_date.strftime("%d.%m.%Y")

# –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–∞—Ç—á–µ–π
def create_calendar():
    clubs = list(FNL_SILVER_CLUBS.keys())
    calendar = []
    # –ü–µ—Ä–≤—ã–π –∫—Ä—É–≥
    for i in range(len(clubs)):
        for j in range(i + 1, len(clubs)):
            calendar.append((clubs[i], clubs[j]))
    # –í—Ç–æ—Ä–æ–π –∫—Ä—É–≥ (–¥–æ–º–∞—à–Ω–∏–µ –º–∞—Ç—á–∏ –º–µ–Ω—è—é—Ç—Å—è –º–µ—Å—Ç–∞–º–∏)
    for i in range(len(clubs)):
        for j in range(i + 1, len(clubs)):
            calendar.append((clubs[j], clubs[i]))
    return calendar

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–∞—Ç—á–µ–π
MATCH_CALENDAR = create_calendar()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ç—É—Ä—É
def get_opponent_by_round(player_club, current_round):
    if current_round > len(MATCH_CALENDAR):
        # –ï—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –∑–∞–∫–æ–Ω—á–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
        current_round = 1
    match = MATCH_CALENDAR[current_round - 1]
    if match[0] == player_club:
        return match[1]
    elif match[1] == player_club:
        return match[0]
    return None

@dp.callback_query(lambda c: c.data == "play_match")
async def play_match_callback(callback: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å –º–∞—Ç—á
    data = await state.get_data()
    if data.get('match_state', {}).get('is_processing'):
        await callback.answer("‚ùå –°–µ–π—á–∞—Å –∏–¥–µ—Ç –º–∞—Ç—á! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", show_alert=True)
        return

    if not await check_subscription(callback.from_user.id):
        await callback.message.answer(
            "–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    can_play, message = await can_play_match(callback.from_user.id)
    if not can_play:
        await callback.message.answer(message)
        return
    
    player = await get_player(callback.from_user.id)
    if not player:
        await callback.message.answer(
            "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start",
            reply_markup=get_main_keyboard()
        )
        return
    
    if not player.is_in_squad:
        await callback.message.answer(
            "‚ùå –í—ã –Ω–µ –≤ –∑–∞—è–≤–∫–µ –Ω–∞ –º–∞—Ç—á\n"
            "–¢—Ä–µ–Ω–µ—Ä —Ä–µ—à–∏–ª –Ω–µ –≤–∫–ª—é—á–∞—Ç—å –≤–∞—Å –≤ —Å–æ—Å—Ç–∞–≤ –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ç—á.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–∞—Ç—á–µ.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
    current_round = player.current_round if player.matches > 0 else 1
    opponent = get_opponent_by_round(player.club, current_round)
    
    if not opponent:
        await callback.message.answer(
            "‚ùå –í —ç—Ç–æ–º —Ç—É—Ä–µ —É –≤–∞—Å –Ω–µ—Ç –º–∞—Ç—á–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="return_to_menu")]
            ])
        )
        new_date = await advance_virtual_date(player)
        await update_player_stats(
            user_id=callback.from_user.id,
            last_match_date=new_date,
            current_round=player.current_round + 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—É—Ä—É
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –¥–∞—Ç—É
    match_date = (await get_virtual_date(player)).strftime("%d.%m.%Y")
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ç—á–∞
    await state.set_data({})
    
    match_state = {
        'your_goals': 0,
        'opponent_goals': 0,
        'minute': 0,
        'possession': 50,
        'last_moment_type': None,
        'your_attacks_count': 0,
        'opponent_attacks_count': 0,
        'current_team': player.club,
        'opponent_team': opponent,
        'is_processing': False,
        'round': current_round,
        'date': match_date,
        'position': player.position,
        'is_opponent_attack': player.position in ["–í—Ä–∞—Ç–∞—Ä—å", "–ó–∞—â–∏—Ç–Ω–∏–∫"],
        'stats': {
            'goals': 0,
            'assists': 0,
            'saves': 0,
            'tackles': 0,
            'clearances': 0,
            'throws': 0
        }
    }
    
    await state.update_data(match_state=match_state)
    
    # –†–∞–∑–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    if player.position in ["–í—Ä–∞—Ç–∞—Ä—å", "–ó–∞—â–∏—Ç–Ω–∏–∫"]:
        message = await callback.message.answer(
            f"üèÜ –¢—É—Ä {current_round} –§–ù–õ –°–µ—Ä–µ–±—Ä–æ\n"
            f"üìÖ {match_date}\n\n"
            f"–ú–∞—Ç—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! {player.club} –ø—Ä–æ—Ç–∏–≤ {opponent}\n"
            f"‚è±Ô∏è 0' –º–∏–Ω—É—Ç–∞. 0-0\n\n"
            f"‚ö†Ô∏è {opponent} –Ω–∞—á–∏–Ω–∞–µ—Ç –∞—Ç–∞–∫—É!",
            reply_markup=get_match_actions_keyboard(player.position)
        )
    else:
        message = await callback.message.answer(
            f"üèÜ –¢—É—Ä {current_round} –§–ù–õ –°–µ—Ä–µ–±—Ä–æ\n"
            f"üìÖ {match_date}\n\n"
            f"–ú–∞—Ç—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! {player.club} –ø—Ä–æ—Ç–∏–≤ {opponent}\n"
            f"‚è±Ô∏è 0' –º–∏–Ω—É—Ç–∞. 0-0\n"
            f"- –ú–∞—Ç—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è",
            reply_markup=get_match_actions_keyboard(player.position)
        )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    match_state['last_message_id'] = message.message_id
    await state.update_data(match_state=match_state)
    
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith('action_'))
async def handle_action(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    match_state = data.get('match_state')
    
    if not match_state:
        await callback.message.answer(
            "–ú–∞—Ç—á –Ω–µ –Ω–∞—á–∞—Ç. –ù–∞–∂–º–∏—Ç–µ '–ò–≥—Ä–∞—Ç—å –º–∞—Ç—á' –¥–ª—è –Ω–∞—á–∞–ª–∞.",
            reply_markup=get_main_keyboard()
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if callback.message.message_id != match_state.get('last_message_id'):
        await callback.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ‚¨áÔ∏è",
            show_alert=True
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –º–æ–º–µ–Ω—Ç
    if match_state.get('is_processing', False):
        await callback.answer("–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞", show_alert=True)
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    match_state['is_processing'] = True
    await state.update_data(match_state=match_state)
    
    try:
        action = callback.data.split('_')[1]
        position = match_state['position']
        
        if position == "–í—Ä–∞—Ç–∞—Ä—å":
            await handle_goalkeeper_save(callback, match_state, state)
        elif position == "–ó–∞—â–∏—Ç–Ω–∏–∫":
            if action == "tackle":
                await handle_defender_tackle(callback, match_state, state)
            elif action == "block":
                await handle_defender_block(callback, match_state, state)
            elif action == "pass_left":
                await handle_defender_pass_left(callback, match_state, state)
            elif action == "pass_right":
                await handle_defender_pass_right(callback, match_state, state)
            elif action == "clear":
                await handle_defender_clearance(callback, match_state, state)
        else:  # –ù–∞–ø–∞–¥–∞—é—â–∏–π
            if action == "shot":
                await handle_forward_shot(callback, match_state, state)
            elif action == "pass":
                await handle_forward_pass(callback, match_state, state)
            elif action == "dribble":
                await handle_forward_dribble(callback, match_state, state)
    except Exception as e:
        print(f"Error in handle_action: {e}")
        match_state['is_processing'] = False
        await state.update_data(match_state=match_state)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
    finally:
        match_state['is_processing'] = False
        await state.update_data(match_state=match_state)
    
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith('defense_'))
async def handle_defense_action(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    match_state = data.get('match_state')
    
    if not match_state:
        await callback.message.answer(
            "–ú–∞—Ç—á –Ω–µ –Ω–∞—á–∞—Ç. –ù–∞–∂–º–∏—Ç–µ '–ò–≥—Ä–∞—Ç—å –º–∞—Ç—á' –¥–ª—è –Ω–∞—á–∞–ª–∞.",
            reply_markup=get_main_keyboard()
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if callback.message.message_id != match_state.get('last_message_id'):
        await callback.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ‚¨áÔ∏è",
            show_alert=True
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –º–æ–º–µ–Ω—Ç
    if match_state.get('is_processing', False):
        await callback.answer("–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞", show_alert=True)
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    match_state['is_processing'] = True
    await state.update_data(match_state=match_state)
    
    try:
        action = callback.data.split('_')[1]
        
        if action == "tackle":
            await handle_defender_tackle(callback, match_state, state)
        elif action == "block":
            await handle_defender_block(callback, match_state, state)
        elif action == "pass_left":
            await handle_defender_pass_left(callback, match_state, state)
        elif action == "pass_right":
            await handle_defender_pass_right(callback, match_state, state)
        elif action == "clear":
            await handle_defender_clearance(callback, match_state, state)
    except Exception as e:
        print(f"Error in handle_defense_action: {e}")
        match_state['is_processing'] = False
        await state.update_data(match_state=match_state)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
    finally:
        match_state['is_processing'] = False
        await state.update_data(match_state=match_state)
    
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞
async def handle_goalkeeper_save(callback: types.CallbackQuery, match_state, state: FSMContext):
    action = callback.data.split('_')[1]
    try:
        # –ü–µ—Ä–≤–∞—è —Ñ–∞–∑–∞ - —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —É–¥–∞—Ä
        if action in ['rush', 'left', 'right']:
            await send_photo_with_text(
                callback.message,
                'defense',
                'save.jpg',
                f"üñêÔ∏è {match_state['current_team']} –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏!\n- –í—Ä–∞—Ç–∞—Ä—å –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —Å–ø–∞—Å–µ–Ω–∏—é"
            )
            await asyncio.sleep(2)
            
            # –°–ª—É—á–∞–π–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞—Ä–∞
            shot_direction = random.choice(['rush', 'left', 'right'])
            
            if action == shot_direction:  # –£–≥–∞–¥–∞–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                match_state['stats']['saves'] += 1
                await send_photo_with_text(
                    callback.message,
                    'defense',
                    'save_success.jpg',
                    "‚úÖ –û—Ç–ª–∏—á–Ω—ã–π —Å–µ–π–≤!\n- –í—Ä–∞—Ç–∞—Ä—å —É–≥–∞–¥–∞–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞—Ä–∞"
                )
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π –Ω–∞–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π
                message = await callback.message.answer(
                    "–ú—è—á —É –≤—Ä–∞—Ç–∞—Ä—è. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_match_actions_keyboard(match_state['position'], is_second_phase=True)
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—Ç–æ—Ä–æ–≥–æ —ç—Ç–∞–ø–∞
                match_state['last_message_id'] = message.message_id
                await state.update_data(match_state=match_state)
                match_state['waiting_second_action'] = True
                await state.update_data(match_state=match_state)
                return
            else:  # –ù–µ —É–≥–∞–¥–∞–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                await send_photo_with_text(
                    callback.message,
                    'defense',
                    'save_fail.jpg',
                    "‚ùå –í—Ä–∞—Ç–∞—Ä—å –Ω–µ —É–≥–∞–¥–∞–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞—Ä–∞!"
                )
                await asyncio.sleep(2)
                
                # –®–∞–Ω—Å –Ω–∞ —Å–ø–∞—Å–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤
                defender_save = random.random()
                if defender_save < 0.4:  # 40% —à–∞–Ω—Å —á—Ç–æ –∑–∞—â–∏—Ç–Ω–∏–∫–∏ –ø–æ–º–æ–≥—É—Ç
                    match_state['stats']['tackles'] += 1
                    await send_photo_with_text(
                        callback.message,
                        'defense',
                        'tackle_success.jpg',
                        "‚úÖ –ó–∞—â–∏—Ç–Ω–∏–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∞–ª–∏!\n- –ú—è—á –≤—ã–±–∏—Ç –≤ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–æ–Ω—É"
                    )
                    await continue_match(callback, match_state, state)
                elif defender_save < 0.7:  # 30% —à–∞–Ω—Å —á—Ç–æ –º—è—á —É–π–¥–µ—Ç –Ω–∞ —É–≥–ª–æ–≤–æ–π
                    await send_photo_with_text(
                        callback.message,
                        'defense',
                        'deflect.jpg',
                        "‚Ü™Ô∏è –ó–∞—â–∏—Ç–Ω–∏–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —É–¥–∞—Ä!\n- –ú—è—á —É—à–µ–ª –Ω–∞ —É–≥–ª–æ–≤–æ–π"
                    )
                    await continue_match(callback, match_state, state)
        
        # –í—Ç–æ—Ä–∞—è —Ñ–∞–∑–∞ - –¥–µ–π—Å—Ç–≤–∏–µ —Å –º—è—á–æ–º –ø–æ—Å–ª–µ —Å–µ–π–≤–∞
        elif action in ['kick', 'throw']:
            if not match_state.get('waiting_second_action'):
                await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–ø–∞—Å—Ç–∏ –≤–æ—Ä–æ—Ç–∞!", show_alert=True)
                return
                
            if action == 'kick':
                await send_photo_with_text(
                    callback.message,
                    'goalkeeper',
                    'kick_start.jpg',
                    f"‚öΩ {match_state['current_team']} —Å –º—è—á–æ–º\n- –í—Ä–∞—Ç–∞—Ä—å –≥–æ—Ç–æ–≤–∏—Ç—Å—è –≤—ã–±–∏—Ç—å –º—è—á"
                )
                await asyncio.sleep(2)
                
                if random.random() < 0.7:
                    await send_photo_with_text(
                        callback.message,
                        'goalkeeper',
                        'kick_success.jpg',
                        "‚úÖ –ú—è—á –≤—ã–±–∏—Ç!\n- –í—Ä–∞—Ç–∞—Ä—å –¥–∞–ª–µ–∫–æ –≤—ã–±–∏–ª –º—è—á –≤ –ø–æ–ª–µ"
                    )
                else:
                    await send_photo_with_text(
                        callback.message,
                        'goalkeeper',
                        'kick_fail.jpg',
                        "‚ùå –ù–µ—É–¥–∞—á–Ω—ã–π –≤—ã–±–∏–≤\n- –ú—è—á –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º"
                    )
                    await simulate_opponent_attack(callback, match_state)
            else:  # throw
                await send_photo_with_text(
                    callback.message,
                    'goalkeeper',
                    'throw_start.jpg',
                    f"üéØ {match_state['current_team']} —Å –º—è—á–æ–º\n- –í—Ä–∞—Ç–∞—Ä—å –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –≤—ã–±—Ä–æ—Å—É –º—è—á–∞"
                )
                await asyncio.sleep(2)
                
                if random.random() < 0.8:
                    match_state['stats']['throws'] += 1
                    await send_photo_with_text(
                        callback.message,
                        'goalkeeper',
                        'throw_success.jpg',
                        "‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±—Ä–æ—Å!\n- –í—Ä–∞—Ç–∞—Ä—å —Ç–æ—á–Ω–æ –≤—ã–±—Ä–æ—Å–∏–ª –º—è—á –ø–∞—Ä—Ç–Ω–µ—Ä—É"
                    )
                else:
                    await send_photo_with_text(
                        callback.message,
                        'goalkeeper',
                        'throw_fail.jpg',
                        "‚ùå –ù–µ—É–¥–∞—á–Ω—ã–π –≤—ã–±—Ä–æ—Å\n- –ú—è—á –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º"
                    )
                    await simulate_opponent_attack(callback, match_state)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
            match_state['waiting_second_action'] = False
            await state.update_data(match_state=match_state)
            await continue_match(callback, match_state, state)
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        match_state['is_processing'] = False
        await state.update_data(match_state=match_state)

def get_defender_defense_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ°Ô∏è –û—Ç–±–æ—Ä –º—è—á–∞", callback_data="defense_tackle")],
        [InlineKeyboardButton(text="üö´ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –±–ª–æ–∫", callback_data="defense_block")]
    ])

def get_defender_after_defense_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–¥–∞—Ç—å –≤–ª–µ–≤–æ", callback_data="action_pass_left")],
        [InlineKeyboardButton(text="‚öΩ –í—ã–±–∏—Ç—å", callback_data="defense_clear")],
        [InlineKeyboardButton(text="‚û°Ô∏è –û—Ç–¥–∞—Ç—å –≤–ø—Ä–∞–≤–æ", callback_data="action_pass_right")]
    ])

async def handle_defender_tackle(callback: types.CallbackQuery, match_state, state: FSMContext):
    try:
        await send_photo_with_text(
            callback.message,
            'defense',
            'tackle_start.jpg',
            f"üõ°Ô∏è {match_state['current_team']} –≤ –∑–∞—â–∏—Ç–µ\n- –ó–∞—â–∏—Ç–Ω–∏–∫ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–±–æ—Ä—É –º—è—á–∞"
        )
        await asyncio.sleep(3)
        
        if random.random() < 0.6:
            match_state['stats']['tackles'] += 1
            await send_photo_with_text(
                callback.message,
                'defense',
                'tackle_success.jpg',
                "‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –æ—Ç–±–æ—Ä!\n- –ó–∞—â–∏—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–ª –º—è—á\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–±–æ—Ä–∞
            match_state['defense_success'] = True
            await state.update_data(match_state=match_state)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –æ—Ç–±–æ—Ä–∞
            message = await callback.message.answer(
                "–ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å –º—è—á–æ–º?",
                reply_markup=get_defender_after_defense_keyboard()
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
            match_state['last_message_id'] = message.message_id
            await state.update_data(match_state=match_state)
        else:
            await send_photo_with_text(
                callback.message,
                'defense',
                'tackle_fail.jpg',
                "‚ùå –ù–µ—É–¥–∞—á–Ω—ã–π –æ—Ç–±–æ—Ä\n- –°–æ–ø–µ—Ä–Ω–∏–∫ —Å–æ—Ö—Ä–∞–Ω–∏–ª –º—è—á"
            )
            await simulate_opponent_attack(callback, match_state)
            await continue_match(callback, match_state, state)
    except Exception as e:
        print(f"Error in handle_defender_tackle: {e}")
        match_state['is_processing'] = False
        await state.update_data(match_state=match_state)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        match_state['is_processing'] = False
        await state.update_data(match_state=match_state)

async def handle_defender_block(callback: types.CallbackQuery, match_state, state: FSMContext):
    try:
        await send_photo_with_text(
            callback.message,
            'defense',
            'block_start.jpg',
            f"üö´ {match_state['current_team']} –≤ –∑–∞—â–∏—Ç–µ\n- –ó–∞—â–∏—Ç–Ω–∏–∫ —Å—Ç–∞–≤–∏—Ç –±–ª–æ–∫"
        )
        await asyncio.sleep(3)
        
        if random.random() < 0.5:
            match_state['stats']['tackles'] += 1
            await send_photo_with_text(
                callback.message,
                'defense',
                'block_success.jpg',
                "‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –±–ª–æ–∫!\n- –ó–∞—â–∏—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —É–¥–∞—Ä\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –±–ª–æ–∫–∞
            match_state['defense_success'] = True
            await state.update_data(match_state=match_state)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –±–ª–æ–∫–∞
            message = await callback.message.answer(
                "–ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å –º—è—á–æ–º?",
                reply_markup=get_defender_after_defense_keyboard()
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
            match_state['last_message_id'] = message.message_id
            await state.update_data(match_state=match_state)
        else:                
            await send_photo_with_text(
                callback.message,
                'defense',
                'block_fail.jpg',
                "‚ùå –ë–ª–æ–∫ –Ω–µ —É–¥–∞–ª—Å—è\n- –°–æ–ø–µ—Ä–Ω–∏–∫ –æ–±—ã–≥—Ä–∞–ª –∑–∞—â–∏—Ç–Ω–∏–∫–∞"
            )
            await simulate_opponent_attack(callback, match_state)
            await continue_match(callback, match_state, state)
    except Exception as e:
        print(f"Error in handle_defender_block: {e}")
        match_state['is_processing'] = False
        await state.update_data(match_state=match_state)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        match_state['is_processing'] = False
        await state.update_data(match_state=match_state)

async def handle_defender_pass_left(callback: types.CallbackQuery, match_state, state: FSMContext):
    try:
        await send_photo_with_text(
            callback.message,
            'pass',
            'left.jpg',
            f"‚¨ÖÔ∏è {match_state['current_team']} —Å –º—è—á–æ–º\n- –ó–∞—â–∏—Ç–Ω–∏–∫ –æ—Ç–¥–∞–µ—Ç –ø–∞—Å –≤–ª–µ–≤–æ"
        )
        await asyncio.sleep(3)
        
        if random.random() < 0.7:
            match_state['stats']['assists'] += 1
            await send_photo_with_text(
                callback.message,
                'pass',
                'success.jpg',
                "‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –ø–∞—Å!\n- –ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ–ª—É—á–∏–ª –º—è—á –≤ –≤—ã–≥–æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"
            )
        else:
            await send_photo_with_text(
                callback.message,
                'pass',
                'intercept.jpg',
                "‚ùå –ü–∞—Å –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω\n- –°–æ–ø–µ—Ä–Ω–∏–∫ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª –ø–µ—Ä–µ–¥–∞—á—É"
            )
            await simulate_opponent_attack(callback, match_state)
        
        await continue_match(callback, match_state, state)
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        match_state['is_processing'] = False
        await state.update_data(match_state=match_state)

async def handle_defender_pass_right(callback: types.CallbackQuery, match_state, state: FSMContext):
    try:
        await send_photo_with_text(
            callback.message,
            'pass',
            'right.jpg',
            f"‚û°Ô∏è {match_state['current_team']} —Å –º—è—á–æ–º\n- –ó–∞—â–∏—Ç–Ω–∏–∫ –æ—Ç–¥–∞–µ—Ç –ø–∞—Å –≤–ø—Ä–∞–≤–æ"
        )
        await asyncio.sleep(3)
        
        if random.random() < 0.7:
            match_state['stats']['assists'] += 1
            await send_photo_with_text(
                callback.message,
                'pass',
                'success.jpg',
                "‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –ø–∞—Å!\n- –ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ–ª—É—á–∏–ª –º—è—á –≤ –≤—ã–≥–æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"
            )
        else:
            await send_photo_with_text(
                callback.message,
                'pass',
                'intercept.jpg',
                "‚ùå –ü–∞—Å –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω\n- –°–æ–ø–µ—Ä–Ω–∏–∫ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª –ø–µ—Ä–µ–¥–∞—á—É"
            )
            await simulate_opponent_attack(callback, match_state)
        
        await continue_match(callback, match_state, state)
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        match_state['is_processing'] = False
        await state.update_data(match_state=match_state)

async def handle_defender_clearance(callback: types.CallbackQuery, match_state, state: FSMContext):
    try:
        await send_photo_with_text(
            callback.message,
            'defense',
            'clear_start.jpg',
            f"‚öΩ {match_state['current_team']} –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n- –ó–∞—â–∏—Ç–Ω–∏–∫ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –≤—ã–±–∏—Ç—å –º—è—á"
        )
        await asyncio.sleep(3)
        
        if random.random() < 0.7:
            # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–Ω—Å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≥–æ–ª–∞ –ø—Ä–∏ –≤—ã–±–∏–≤–∞–Ω–∏–∏ –º—è—á–∞
            if random.random() < 0.05:  # 5% —à–∞–Ω—Å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≥–æ–ª–∞
                match_state['your_goals'] += 1
                match_state['stats']['goals'] += 1
                await send_photo_with_text(
                    callback.message,
                    'goals',
                    'goal.jpg',
                    f"‚öΩ –ì–û–û–û–û–õ!\n- –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –ó–∞—â–∏—Ç–Ω–∏–∫ —Å–ª—É—á–∞–π–Ω–æ –∑–∞–±–∏–ª –≥–æ–ª! –°—á—ë—Ç: {match_state['your_goals']}-{match_state['opponent_goals']}"
                )
            else:
                match_state['stats']['clearances'] += 1
                await send_photo_with_text(
                    callback.message,
                    'defense',
                    'clear_success.jpg',
                    "‚úÖ –ú—è—á –≤—ã–±–∏—Ç!\n- –ó–∞—â–∏—Ç–Ω–∏–∫ –≤—ã–±–∏–ª –º—è—á –∏–∑ –æ–ø–∞—Å–Ω–æ–π –∑–æ–Ω—ã"
                )
        else:
            await send_photo_with_text(
                callback.message,
                'defense',
                'clear_fail.jpg',
                "‚ùå –ù–µ—É–¥–∞—á–Ω—ã–π –≤—ã–±–∏–≤\n- –ú—è—á –æ—Å—Ç–∞–ª—Å—è –≤ –æ–ø–∞—Å–Ω–æ–π –∑–æ–Ω–µ"
            )
            await simulate_opponent_attack(callback, match_state)
        
        await continue_match(callback, match_state, state)
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        match_state['is_processing'] = False
        await state.update_data(match_state=match_state)

async def handle_forward_shot(callback: types.CallbackQuery, match_state, state: FSMContext):
    try:
        await send_photo_with_text(
            callback.message,
            'shot',
            'start.jpg',
            f"‚öΩ {match_state['current_team']} —Å –º—è—á–æ–º\n- –ù–∞–ø–∞–¥–∞—é—â–∏–π –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —É–¥–∞—Ä—É"
        )
        await asyncio.sleep(3)
        
        if random.random() < 0.25:  # –£–º–µ–Ω—å—à–∞–µ–º —à–∞–Ω—Å –≥–æ–ª–∞ —Å 0.4 –¥–æ 0.25
            match_state['your_goals'] += 1
            match_state['stats']['goals'] += 1
            await send_photo_with_text(
                callback.message,
                'goals',
                'goal.jpg',
                f"‚öΩ –ì–û–û–û–û–õ!\n- –û—Ç–ª–∏—á–Ω—ã–π —É–¥–∞—Ä! –°—á—ë—Ç: {match_state['your_goals']}-{match_state['opponent_goals']}"
            )
        else:
            await send_photo_with_text(
                callback.message,
                'shot',
                'miss.jpg',
                "‚ùå –£–¥–∞—Ä –º–∏–º–æ\n- –í—Ä–∞—Ç–∞—Ä—å —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –æ—Ç—Ä–∞–∑–∏–ª —É–¥–∞—Ä"
            )
            await simulate_opponent_attack(callback, match_state)
        
        await continue_match(callback, match_state, state)
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        match_state['is_processing'] = False
        await state.update_data(match_state=match_state)

async def handle_forward_pass(callback: types.CallbackQuery, match_state, state: FSMContext):
    try:
        await send_photo_with_text(
            callback.message,
            'pass',
            'start.jpg',
            f"üéØ {match_state['current_team']} —Å –º—è—á–æ–º\n- –ù–∞–ø–∞–¥–∞—é—â–∏–π –∏—â–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏"
        )
        await asyncio.sleep(3)
        
        if random.random() < 0.7:
            match_state['stats']['assists'] += 1
            await send_photo_with_text(
                callback.message,
                'pass',
                'success.jpg',
                "‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –ø–∞—Å!\n- –ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ–ª—É—á–∏–ª –º—è—á –≤ –≤—ã–≥–æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"
            )
            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Å–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞—Ç–∞–∫—É
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_match_actions_keyboard('forward', is_second_phase=True)
            )
        else:
            await send_photo_with_text(
                callback.message,
                'pass',
                'intercept.jpg',
                "‚ùå –ü–∞—Å –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω\n- –°–æ–ø–µ—Ä–Ω–∏–∫ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª –ø–µ—Ä–µ–¥–∞—á—É"
            )
            await simulate_opponent_attack(callback, match_state)
            await continue_match(callback, match_state, state)
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        match_state['is_processing'] = False
        await state.update_data(match_state=match_state)

async def handle_forward_dribble(callback: types.CallbackQuery, match_state, state: FSMContext):
    try:
        await send_photo_with_text(
            callback.message,
            'dribble',
            'start.jpg',
            f"üèÉ {match_state['current_team']} —Å –º—è—á–æ–º\n- –ù–∞–ø–∞–¥–∞—é—â–∏–π –Ω–∞—á–∏–Ω–∞–µ—Ç –¥—Ä–∏–±–ª–∏–Ω–≥"
        )
        await asyncio.sleep(3)
        
        if random.random() < 0.6:
            await send_photo_with_text(
                callback.message,
                'dribble',
                'success.jpg',
                "‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –¥—Ä–∏–±–ª–∏–Ω–≥!\n- –ù–∞–ø–∞–¥–∞—é—â–∏–π –æ–±—ã–≥—Ä–∞–ª –∑–∞—â–∏—Ç–Ω–∏–∫–∞"
            )
            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥—Ä–∏–±–ª–∏–Ω–≥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞—Ç–∞–∫—É
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_match_actions_keyboard('forward', is_second_phase=True)
            )
        else:
            await send_photo_with_text(
                callback.message,
                'dribble',
                'fail.jpg',
                "‚ùå –ü–æ—Ç–µ—Ä—è –º—è—á–∞\n- –ó–∞—â–∏—Ç–Ω–∏–∫ –æ—Ç–æ–±—Ä–∞–ª –º—è—á"
            )
            await simulate_opponent_attack(callback, match_state)
            await continue_match(callback, match_state, state)
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        match_state['is_processing'] = False
        await state.update_data(match_state=match_state)

async def continue_match(callback: types.CallbackQuery, match_state, state: FSMContext):
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω—É—Ç—É
    match_state['minute'] += random.randint(8, 12)
    
    if match_state['minute'] < 90:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—É–¥–µ—Ç –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –º–æ–º–µ–Ω—Ç –∞—Ç–∞–∫–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –¥–ª—è –≤—Ä–∞—Ç–∞—Ä—è –∏ –∑–∞—â–∏—Ç–Ω–∏–∫–∞
        position = match_state['position']
        
        # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º, —á—å—è –±—É–¥–µ—Ç –∞—Ç–∞–∫–∞ (40% —à–∞–Ω—Å –∞—Ç–∞–∫–∏ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã)
        is_team_attack = random.random() < 0.4
        
        if position in ["–í—Ä–∞—Ç–∞—Ä—å", "–ó–∞—â–∏—Ç–Ω–∏–∫"]:
            if is_team_attack:
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞—Ç–∞–∫—É —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã
                await simulate_team_attack(callback, match_state)
                message = (
                    f"‚è±Ô∏è {match_state['minute']}' –º–∏–Ω—É—Ç–∞\n"
                    f"–°—á—ë—Ç: {match_state['your_goals']} - {match_state['opponent_goals']}\n"
                    f"‚ö†Ô∏è {match_state['opponent_team']} –Ω–∞—á–∏–Ω–∞–µ—Ç –∞—Ç–∞–∫—É!\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                )
            else:
                match_state['is_opponent_attack'] = True
                message = (
                    f"‚è±Ô∏è {match_state['minute']}' –º–∏–Ω—É—Ç–∞\n"
                    f"–°—á—ë—Ç: {match_state['your_goals']} - {match_state['opponent_goals']}\n"
                    f"‚ö†Ô∏è {match_state['opponent_team']} –Ω–∞—á–∏–Ω–∞–µ—Ç –∞—Ç–∞–∫—É!\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                )
        else:
            message = (
                f"‚è±Ô∏è {match_state['minute']}' –º–∏–Ω—É—Ç–∞\n"
                f"–°—á—ë—Ç: {match_state['your_goals']} - {match_state['opponent_goals']}\n"
                f"- {'–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∏–Ω—É—Ç—ã –º–∞—Ç—á–∞' if match_state['minute'] > 85 else '–ú–∞—Ç—á –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è'}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
        keyboard = get_match_actions_keyboard(position)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        new_message = await callback.message.answer(message, reply_markup=keyboard)
        match_state['last_message_id'] = new_message.message_id
        await state.update_data(match_state=match_state)
    else:
        await finish_match(callback, state)

async def simulate_team_attack(callback: types.CallbackQuery, match_state):
    """–°–∏–º—É–ª—è—Ü–∏—è –∞—Ç–∞–∫–∏ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã"""
    attack_type = random.choices(
        ['dribble', 'shot', 'pass'],
        weights=[0.3, 0.4, 0.3]
    )[0]
    
    if attack_type == "shot":
        await send_photo_with_text(
            callback.message,
            'attack',
            'shot_start.jpg',
            f"‚öΩ {match_state['current_team']} –∞—Ç–∞–∫—É–µ—Ç!\n- –ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ –∫–æ–º–∞–Ω–¥–µ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —É–¥–∞—Ä—É"
        )
        await asyncio.sleep(2)
        
        if random.random() < 0.3:  # 30% —à–∞–Ω—Å –≥–æ–ª–∞
            match_state['your_goals'] += 1
            await send_photo_with_text(
                callback.message,
                'goals',
                'goal.jpg',
                f"‚öΩ –ì–û–û–û–û–õ!\n- –ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ –∫–æ–º–∞–Ω–¥–µ –∑–∞–±–∏–≤–∞–µ—Ç! –°—á—ë—Ç: {match_state['your_goals']}-{match_state['opponent_goals']}"
            )
        else:
            await send_photo_with_text(
                callback.message,
                'attack',
                'shot_miss.jpg',
                "‚ùå –ú–∏–º–æ –≤–æ—Ä–æ—Ç\n- –£–¥–∞—Ä –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ—Ç–æ—á–Ω—ã–º"
            )
    
    elif attack_type == "pass":
        await send_photo_with_text(
            callback.message,
            'attack',
            'pass_start.jpg',
            f"üéØ {match_state['current_team']} –≤ –∞—Ç–∞–∫–µ\n- –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é"
        )
        await asyncio.sleep(2)
        
        if random.random() < 0.4:  # 40% —à–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            match_state['your_goals'] += 1
            await send_photo_with_text(
                callback.message,
                'goals',
                'goal.jpg',
                f"‚öΩ –ì–û–û–û–û–õ!\n- –ö—Ä–∞—Å–∏–≤–∞—è –∫–æ–º–∞–Ω–¥–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è! –°—á—ë—Ç: {match_state['your_goals']}-{match_state['opponent_goals']}"
            )
        else:
            await send_photo_with_text(
                callback.message,
                'attack',
                'pass_fail.jpg',
                "‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å\n- –°–æ–ø–µ—Ä–Ω–∏–∫ –ø—Ä–µ—Ä–≤–∞–ª –∞—Ç–∞–∫—É"
            )
    
    else:  # dribble
        await send_photo_with_text(
            callback.message,
            'attack',
            'dribble_start.jpg',
            f"üèÉ {match_state['current_team']} –∞—Ç–∞–∫—É–µ—Ç\n- –ü–∞—Ä—Ç–Ω–µ—Ä –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±—ã–≥—Ä–∞—Ç—å –∑–∞—â–∏—Ç–Ω–∏–∫–∞"
        )
        await asyncio.sleep(2)
        
        if random.random() < 0.35:  # 35% —à–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ–π –∞—Ç–∞–∫–∏
            match_state['your_goals'] += 1
            await send_photo_with_text(
                callback.message,
                'goals',
                'goal.jpg',
                f"‚öΩ –ì–û–û–û–û–õ!\n- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ! –°—á—ë—Ç: {match_state['your_goals']}-{match_state['opponent_goals']}"
            )
        else:
            await send_photo_with_text(
                callback.message,
                'attack',
                'dribble_fail.jpg',
                "‚ùå –ü–æ—Ç–µ—Ä—è –º—è—á–∞\n- –ó–∞—â–∏—Ç–Ω–∏–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–ª –º—è—á"
            )

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ç—á–∞
async def finish_match(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    match_state = data['match_state']

    player = await get_player(callback.from_user.id)
    matches = player.matches + 1  # matches
    wins = player.wins         # wins
    draws = player.draws        # draws
    losses = player.losses       # losses
    current_round = player.current_round + 1  # current_round
    
    if match_state['your_goals'] > match_state['opponent_goals']:
        wins += 1
        result = "–ø–æ–±–µ–¥–∏–ª–∏"
        result_emoji = "üèÜ"
    elif match_state['your_goals'] < match_state['opponent_goals']:
        losses += 1
        result = "–ø—Ä–æ–∏–≥—Ä–∞–ª–∏"
        result_emoji = "üòî"
    else:
        draws += 1
        result = "—Å—ã–≥—Ä–∞–ª–∏ –≤–Ω–∏—á—å—é"
        result_emoji = "ü§ù"

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –ø–æ—Å–ª–µ –º–∞—Ç—á–∞
    new_date = await advance_virtual_date(player)
    
    await update_player_stats(
        user_id=callback.from_user.id,
        matches=matches,
        wins=wins,
        draws=draws,
        losses=losses,
        goals=match_state['stats']['goals'],
        assists=match_state['stats']['assists'],
        saves=match_state['stats']['saves'],
        tackles=match_state['stats']['tackles'],
        current_round=current_round,
        last_match_date=new_date
    )
    
    stats = (f"{result_emoji} –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã {result}!\n"
            f"üèÜ –¢—É—Ä {match_state['round']} –§–ù–õ –°–µ—Ä–µ–±—Ä–æ\n"
            f"üìÖ {new_date}\n\n"  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É
            f"–ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç: {match_state['your_goals']}-{match_state['opponent_goals']}\n\n"
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –º–∞—Ç—á–µ:\n"
            f"–ì–æ–ª—ã: {match_state['stats']['goals']}\n"
            f"–ì–æ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–¥–∞—á–∏: {match_state['stats']['assists']}\n"
            f"–°–µ–π–≤—ã: {match_state['stats']['saves']}\n"
            f"–û—Ç–±–æ—Ä—ã: {match_state['stats']['tackles']}\n\n"
            f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–ú–∞—Ç—á–∏: {matches}\n"
            f"–ü–æ–±–µ–¥—ã: {wins}\n"
            f"–ù–∏—á—å–∏: {draws}\n"
            f"–ü–æ—Ä–∞–∂–µ–Ω–∏—è: {losses}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞
    player = await get_player(callback.from_user.id)  # –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    league, offers = get_transfer_offers(player)
    if offers:
        await callback.message.answer(
            "–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –∫–ª—É–±–æ–≤! –•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏?",
            reply_markup=get_transfer_keyboard(offers, league)
        )
        # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–ª—É–± –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π callback
        await callback.answer()
        return
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" –∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
        [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="return_to_menu")]
    ])
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ç—á–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.clear()  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(GameStates.playing)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(stats, reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "show_stats")
async def show_stats_callback(callback: types.CallbackQuery, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ç—á–∞
    await state.set_data({})
    await state.set_state(GameStates.playing)
    
    if not await check_subscription(callback.from_user.id):
        await callback.message.answer(
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    player = await get_player(callback.from_user.id)
    if not player:
        await callback.message.answer(
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –∫–æ–º–∞–Ω–¥—ã /start",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    name = player.name if player.name else "–ò–≥—Ä–æ–∫"
    position = player.position if player.position else "–ù–µ –≤—ã–±—Ä–∞–Ω–∞"
    club = player.club if player.club else "–ù–µ –≤—ã–±—Ä–∞–Ω"
    matches = player.matches if player.matches > 0 else 0
    wins = player.wins if player.wins > 0 else 0
    draws = player.draws if player.draws > 0 else 0
    losses = player.losses if player.losses > 0 else 0

    position_stats = ""
    if position == "–í—Ä–∞—Ç–∞—Ä—å":
        saves = player.saves if player.saves > 0 else 0
        position_stats = f"–°–µ–π–≤—ã: {saves}\n"
    elif position == "–ó–∞—â–∏—Ç–Ω–∏–∫":
        goals = player.goals if player.goals > 0 else 0
        assists = player.assists if player.assists > 0 else 0
        tackles = player.tackles if player.tackles > 0 else 0
        position_stats = f"–ì–æ–ª—ã: {goals}\n–ì–æ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–¥–∞—á–∏: {assists}\n–û—Ç–±–æ—Ä—ã: {tackles}\n"
    elif position == "–ù–∞–ø–∞–¥–∞—é—â–∏–π":
        goals = player.goals if player.goals > 0 else 0
        assists = player.assists if player.assists > 0 else 0
        position_stats = f"–ì–æ–ª—ã: {goals}\n–ì–æ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–¥–∞—á–∏: {assists}\n"
    
    stats = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ {name} ({position})\n"
            f"–ö–ª—É–±: {club}\n\n"
            f"–ú–∞—Ç—á–∏: {matches}\n"
            f"–ü–æ–±–µ–¥—ã: {wins}\n"
            f"–ù–∏—á—å–∏: {draws}\n"
            f"–ü–æ—Ä–∞–∂–µ–Ω–∏—è: {losses}\n\n"
            f"{position_stats}")
    
    await callback.message.answer(stats, reply_markup=get_main_keyboard())
    await callback.answer()

@dp.callback_query(lambda c: c.data == "return_to_menu")
async def return_to_menu_callback(callback: types.CallbackQuery, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ç—á–∞
    await state.clear()
    await state.set_state(GameStates.playing)
    
    player = await get_player(callback.from_user.id)
    if player:
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {player.name}!\n\n"
            f"–í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ {player.club}\n"
            f"–ü–æ–∑–∏—Ü–∏—è: {player.position}\n"
            f"{'‚úÖ –í —Å—Ç–∞—Ä—Ç–æ–≤–æ–º —Å–æ—Å—Ç–∞–≤–µ' if player.is_in_squad else '‚ùå –ù–µ –≤ –∑–∞—è–≤–∫–µ'}\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä!\n"
            "üèÜ –ü–æ–±–µ–∂–¥–∞–π –≤ –º–∞—Ç—á–∞—Ö\n"
            "‚≠ê –°—Ç–∞–Ω—å –ª–µ–≥–µ–Ω–¥–æ–π —Ñ—É—Ç–±–æ–ª–∞!"
        )
        with open("mbappe.png", "rb") as file:
            photo = BufferedInputFile(file.read(), filename="mbappe.png")
            await callback.message.answer_photo(
                photo,
                caption=welcome_text,
                reply_markup=get_main_keyboard()
            )
    await callback.answer()

async def simulate_opponent_attack(callback: types.CallbackQuery, match_state):
    attack_type = random.choices(
        ['dribble', 'shot', 'pass'],
        weights=[0.3, 0.4, 0.3]
    )[0]
    
    if attack_type == "dribble":
        await send_photo_with_text(
            callback.message,
            'opponent',
            'dribble_start.jpg',
            f"‚öΩ {match_state['opponent_team']} —Å –º—è—á–æ–º\n- –ò–≥—Ä–æ–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –¥—Ä–∏–±–ª–∏–Ω–≥"
        )
        await asyncio.sleep(3)
        
        if random.random() < 0.6:
            await send_photo_with_text(
                callback.message,
                'opponent',
                'dribble_success.jpg',
                "‚ùå –°–æ–ø–µ—Ä–Ω–∏–∫ –æ–±—ã–≥—Ä–∞–ª –∑–∞—â–∏—Ç–Ω–∏–∫–∞\n- –ò–≥—Ä–æ–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –∑–∞—â–∏—Ç—É"
            )
            await asyncio.sleep(3)
            
            if random.random() < 0.5:
                await send_photo_with_text(
                    callback.message,
                    'opponent',
                    'shot_start.jpg',
                    "‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —É–¥–∞—Ä—É\n- –ò–≥—Ä–æ–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –Ω–∞–Ω–µ—Å—Ç–∏ —É–¥–∞—Ä"
                )
                await asyncio.sleep(3)
                
                if random.random() < 0.4:
                    match_state['opponent_goals'] += 1
                    await send_photo_with_text(
                        callback.message,
                        'opponent',
                        'goal.jpg',
                        f"‚öΩ –ì–û–û–û–û–õ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!\n- –û—Ç–ª–∏—á–Ω—ã–π —É–¥–∞—Ä! –°—á—ë—Ç: {match_state['your_goals']}-{match_state['opponent_goals']}"
                    )
                else:
                    match_state['stats']['saves'] += 1
                    await send_photo_with_text(
                        callback.message,
                        'defense',
                        'save.jpg',
                        "‚úÖ –ù–∞—à –≤—Ä–∞—Ç–∞—Ä—å –æ—Ç—Ä–∞–∑–∏–ª —É–¥–∞—Ä\n- –í—Ä–∞—Ç–∞—Ä—å —Å–æ–≤–µ—Ä—à–∏–ª –æ—Ç–ª–∏—á–Ω—ã–π —Å–µ–π–≤"
                    )
            else:
                match_state['stats']['tackles'] += 1
                await send_photo_with_text(
                    callback.message,
                    'defense',
                    'tackle.jpg',
                    "‚úÖ –ù–∞—à –∑–∞—â–∏—Ç–Ω–∏–∫ —É—Å–ø–µ–ª –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å\n- –ó–∞—â–∏—Ç–Ω–∏–∫ –Ω–µ –¥–∞–ª —Å–æ–ø–µ—Ä–Ω–∏–∫—É —É–¥–∞—Ä–∏—Ç—å"
                )
        else:
            match_state['stats']['tackles'] += 1
            await send_photo_with_text(
                callback.message,
                'defense',
                'tackle.jpg',
                "‚úÖ –ù–∞—à –∑–∞—â–∏—Ç–Ω–∏–∫ –æ—Ç–æ–±—Ä–∞–ª –º—è—á\n- –ó–∞—â–∏—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–ª –º—è—á"
            )
    
    elif attack_type == "shot":
        await send_photo_with_text(
            callback.message,
            'opponent',
            'shot_start.jpg',
            f"‚öΩ {match_state['opponent_team']} —Å –º—è—á–æ–º\n- –ò–≥—Ä–æ–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —É–¥–∞—Ä—É"
        )
        await asyncio.sleep(3)
        
        if random.random() < 0.3:
            match_state['opponent_goals'] += 1
            await send_photo_with_text(
                callback.message,
                'opponent',
                'goal.jpg',
                f"‚öΩ –ì–û–û–û–û–õ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!\n- –û—Ç–ª–∏—á–Ω—ã–π —É–¥–∞—Ä! –°—á—ë—Ç: {match_state['your_goals']}-{match_state['opponent_goals']}"
            )
        else:
            match_state['stats']['saves'] += 1
            await send_photo_with_text(
                callback.message,
                'defense',
                'save.jpg',
                "‚úÖ –ù–∞—à –≤—Ä–∞—Ç–∞—Ä—å –æ—Ç—Ä–∞–∑–∏–ª —É–¥–∞—Ä\n- –í—Ä–∞—Ç–∞—Ä—å —Å–æ–≤–µ—Ä—à–∏–ª –æ—Ç–ª–∏—á–Ω—ã–π —Å–µ–π–≤"
            )
    
    elif attack_type == "pass":
        await send_photo_with_text(
            callback.message,
            'opponent',
            'pass_start.jpg',
            f"‚öΩ {match_state['opponent_team']} —Å –º—è—á–æ–º\n- –ò–≥—Ä–æ–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏—â–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
        )
        await asyncio.sleep(3)
        
        if random.random() < 0.6:
            await send_photo_with_text(
                callback.message,
                'opponent',
                'pass_success.jpg',
                "‚ùå –°–æ–ø–µ—Ä–Ω–∏–∫ –æ—Ç–¥–∞–ª –æ–ø–∞—Å–Ω—ã–π –ø–∞—Å\n- –ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ–ª—É—á–∏–ª –º—è—á –≤ –≤—ã–≥–æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"
            )
            await asyncio.sleep(3)
            
            if random.random() < 0.4:
                match_state['opponent_goals'] += 1
                await send_photo_with_text(
                    callback.message,
                    'opponent',
                    'goal.jpg',
                    f"‚öΩ –ì–û–û–û–û–õ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!\n- –ü–∞—Ä—Ç–Ω–µ—Ä —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –º–æ–º–µ–Ω—Ç! –°—á—ë—Ç: {match_state['your_goals']}-{match_state['opponent_goals']}"
                )
            else:
                match_state['stats']['saves'] += 1
                await send_photo_with_text(
                    callback.message,
                    'defense',
                    'save.jpg',
                    "‚úÖ –ù–∞—à –≤—Ä–∞—Ç–∞—Ä—å –æ—Ç—Ä–∞–∑–∏–ª —É–¥–∞—Ä\n- –í—Ä–∞—Ç–∞—Ä—å —Å–æ–≤–µ—Ä—à–∏–ª –æ—Ç–ª–∏—á–Ω—ã–π —Å–µ–π–≤"
                )
        else:
            match_state['stats']['tackles'] += 1
            await send_photo_with_text(
                callback.message,
                'defense',
                'intercept.jpg',
                "‚úÖ –ù–∞—à –∑–∞—â–∏—Ç–Ω–∏–∫ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª –ø–∞—Å\n- –ó–∞—â–∏—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª –ø–µ—Ä–µ–¥–∞—á—É"
            )

async def reset_player_stats(user_id):
    async with AsyncSessionLocal() as session:
        await session.execute(
            update(Player).where(Player.user_id == user_id).values(
                matches=0,
                wins=0,
                draws=0,
                losses=0,
                goals=0,
                assists=0,
                saves=0,
                tackles=0,
                current_round=1,
                last_match_date=SEASON_START_DATE
            )
        )
        await session.commit()

async def delete_player(user_id):
    """–£–¥–∞–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    async with AsyncSessionLocal() as session:
        await session.execute(
            delete(Player).where(Player.user_id == user_id)
        )
        await session.commit()

@dp.message(Command("reset_stats"))
async def cmd_reset_stats(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å –º–∞—Ç—á
    data = await state.get_data()
    if data.get('match_state'):
        await message.answer(
            "‚ùå –°–µ–π—á–∞—Å –∏–¥–µ—Ç –º–∞—Ç—á! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
            reply_markup=get_main_keyboard()
        )
        return
    
    player = await get_player(message.from_user.id)
    if not player:
        await message.answer(
            "‚ùå –í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Å–≤–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="confirm_reset")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_reset")]
    ])
    
    await message.answer(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?\n\n"
        f"–ò–º—è: {player.name}\n"
        f"–ü–æ–∑–∏—Ü–∏—è: {player.position}\n"
        f"–ö–ª—É–±: {player.club}\n\n"
        f"–í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ–±–Ω—É–ª–µ–Ω–∞, –Ω–æ –∏–º—è, –ø–æ–∑–∏—Ü–∏—è –∏ –∫–ª—É–± –æ—Å—Ç–∞–Ω—É—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏.",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "confirm_reset")
async def confirm_reset_callback(callback: types.CallbackQuery, state: FSMContext):
    await reset_player_stats(callback.from_user.id)
    await callback.message.edit_text(
        "‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∫–∞—Ä—å–µ—Ä—ã."
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "cancel_reset")
async def cancel_reset_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚ùå –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.\n"
        "–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
    )
    await callback.answer()

# 2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ –ø–µ—Ä–µ—Ö–æ–¥–µ
TOP_SILVER = ["–¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫", "–°–∏–±–∏—Ä—å", "–ê–≤–∞–Ω–≥–∞—Ä–¥-–ö—É—Ä—Å–∫"]
MID_GOLD = ["–í–æ–ª–≥–∞—Ä—å", "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–†–æ–¥–∏–Ω–∞-2", "–ú–∞—à—É–∫-–ö–ú–í", "–í–µ–ª–µ—Å"]

def get_transfer_offers(player):
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
    club = player.club
    matches = player.matches
    goals = player.goals
    assists = player.assists
    saves = player.saves
    tackles = player.tackles
    position = player.position
    offers = []
    # –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ —Ç–æ–ø –°–µ—Ä–µ–±—Ä–∞ –≤ —Å–µ—Ä–µ–¥–Ω—è–∫ –ó–æ–ª–æ—Ç–∞
    if club in TOP_SILVER and matches >= 10 and (goals >= 5 or assists >= 5 or saves >= 40 or tackles >= 25):
        offers = random.sample(MID_GOLD, 2)
        return 'gold', offers
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤–Ω—É—Ç—Ä–∏ –°–µ—Ä–µ–±—Ä–∞ (–≤–≤–µ—Ä—Ö)
    elif club not in TOP_SILVER and matches >= 10 and (goals >= 5 or assists >= 5 or saves >= 5 or tackles >= 5):
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–æ–ø-–∫–ª—É–±—ã –°–µ—Ä–µ–±—Ä–∞, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
        available = [c for c in TOP_SILVER if c != club]
        if available:
            offers = random.sample(available, min(2, len(available)))
            return 'silver', offers
    return None, []

# 3. –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞

def get_transfer_keyboard(offers, league):
    keyboard = []
    for club in offers:
        keyboard.append([InlineKeyboardButton(
            text=f"{club} ({'–ó–æ–ª–æ—Ç–æ' if league == 'gold' else '–°–µ—Ä–µ–±—Ä–æ'})",
            callback_data=f"transfer_{league}_{club}"
        )])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# 4. Callback –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
@dp.callback_query(lambda c: c.data.startswith('transfer_'))
async def transfer_callback(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split('_')
    league = parts[1]
    club = '_'.join(parts[2:])
    await update_player_club(callback.from_user.id, club)
    await callback.message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –≤ –∫–ª—É–± {club} ({'–§–ù–õ –ó–æ–ª–æ—Ç–æ' if league == 'gold' else '–§–ù–õ –°–µ—Ä–µ–±—Ä–æ'})! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!", reply_markup=get_main_keyboard())
    await callback.answer()

@dp.message(Command("delete_player"))
async def cmd_delete_player(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å –º–∞—Ç—á
    data = await state.get_data()
    if data.get('match_state'):
        await message.answer(
            "‚ùå –°–µ–π—á–∞—Å –∏–¥–µ—Ç –º–∞—Ç—á! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫
    player = await get_player(message.from_user.id)
    if not player:
        await message.answer(
            "‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_delete")]
    ])
    
    await message.answer(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞?\n\n"
        f"–ò–º—è: {player.name}\n"
        f"–ü–æ–∑–∏—Ü–∏—è: {player.position}\n"
        f"–ö–ª—É–±: {player.club}\n\n"
        f"–í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "confirm_delete")
async def confirm_delete_callback(callback: types.CallbackQuery, state: FSMContext):
    await delete_player(callback.from_user.id)
    await callback.message.edit_text(
        "‚úÖ –ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞."
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "cancel_delete")
async def cancel_delete_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
        "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    )
    await callback.answer()

async def main():
    await init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await dp.start_polling(bot)

@dp.message(Command("admin_delete_player"))
async def cmd_admin_delete_player(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id != 5259325234:  # –¢–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∏–≥—Ä–æ–∫–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    try:
        user_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞: /admin_delete_player <ID>")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫
    player = await get_player(user_id)
    if not player:
        await message.answer(f"‚ùå –ò–≥—Ä–æ–∫ —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    # –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
    await delete_player(user_id)
    await message.answer(f"‚úÖ –ò–≥—Ä–æ–∫ {player.name} (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

if __name__ == "__main__":
    asyncio.run(main())
